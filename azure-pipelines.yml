# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- master

pool:
  vmImage: 'windows-latest'

steps:
  - checkout: self
    clean: true
    persistCredentials: true

  - task: NodeTool@0
    inputs:
      versionSpec: "14.x"
    displayName: "Install Node.js"

  - task: SonarCloudPrepare@1
    inputs:
      SonarCloud: 'SonarCloud'
      organization: 'axaguildev'
      scannerMode: 'MSBuild'
      projectKey: 'AxaGuilDEv_ml-cli'
      projectName: 'ml-cli'
      extraProperties: |
        sonar.exclusions=**/*.spec.ts,**/*.spec.tsx,**/*.stories.tsx,**/ClientApp/coverage/**,Scripts/**,**/*.scss,**/__snapshots__/**,**/*[Tt]ests.cs,**/node_modules/**,**/ClientApp/build/**,**/ClientApp/.storybook/**,**/ClientApp/storybook-static/**,**/obj/**,**/__mocks__/**,**/ClientApp/src/serviceWorker.ts
        sonar.typescript.lcov.reportPaths=ClientApp/coverage/lcov.info
        sonar.cs.opencover.reportsPaths=**/opencover.xml
      condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

  - task: Npm@0
    displayName: "npm ci:front"
    inputs:
      cwd: src/Ml.Cli.WebApp/ClientApp
      command: ci

  - task: Npm@0
    displayName: "npm test api:front"
    inputs:
      cwd: src/Ml.Cli.WebApp/ClientApp
      command: test
      arguments: "--  --runInBand --coverage --watchAll=false"

  - task: Npm@0
    displayName: "npm run build storybook"
    inputs:
      cwd: src/Ml.Cli.WebApp/ClientApp
      command: run
      arguments: build-storybook

  - task: Npm@0
    displayName: "npm run build"
    inputs:
      cwd: src/Ml.Cli.WebApp/ClientApp
      command: run
      arguments: build

  - task: DotNetCoreInstaller@0
    displayName: "Use .NET Core sdk 3.1.402"
    inputs:
      version: 3.1.402
    enabled: true

  - task: DotNetCoreCLI@2
    displayName: "dotnet test"
    inputs:
      command: test
      projects: "**/*Tests.csproj"
      arguments: '--configuration $(BuildConfiguration) /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=./coverage/opencover.xml'

  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 2.2.207'
    inputs:
      version: 2.2.207
    enabled: true
    
  - task: SonarCloudAnalyze@1
    displayName: "Run Code Analysis"
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

  - task: SonarCloudPublish@1
    displayName: "Publish Quality Gate Result"
    condition: and(succeeded(), eq(variables['System.PullRequest.IsFork'], 'False'))

  - task: DotNetCoreInstaller@0
    displayName: 'Use .NET Core sdk 3.1.402'
    inputs:
      version: 3.1.402
    enabled: true

  - task: DotNetCoreCLI@2
    displayName: Publish Unbuntu ml-cli
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli/ubuntu -f netcoreapp3.1 -v d -c Release -r linux-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.Cli"

  - task: DotNetCoreCLI@2
    displayName: Publish Unbuntu ml-cli-webapp
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli-webapp/ubuntu -f netcoreapp3.1 -v d -c Release -r linux-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.Cli.WebApp"

  - task: DotNetCoreCLI@2
    displayName: Publish Red Hat Enterprise Linux ml-cli
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli/rhel -f netcoreapp3.1 -v d -c Release -r rhel-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.Cli"
  
  - task: DotNetCoreCLI@2
    displayName: Publish MacOS ml-cli
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli/macos -f netcoreapp3.1 -v d -c Release -r osx-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.Cli"

  - task: DotNetCoreCLI@2
    displayName: Publish MacOS ml-cli-webapp
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli-webapp/macos -f netcoreapp3.1 -v d -c Release -r osx-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.WebApp"

  - task: DotNetCoreCLI@2
    displayName: Publish Win10 ml-cli
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli/win10 -f netcoreapp3.1 -v d -c Release -r win10-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.Cli"

  - task: DotNetCoreCLI@2
    displayName: Publish Win10 ml-cli-webapp
    condition: and(succeeded(), ne(variables['Build. Reason'], 'PullRequest'))
    inputs:
      command: publish
      publishWebProjects: false
      arguments: "--self-contained true --output $(Build.ArtifactStagingDirectory)/ml-cli-webapp/macos -f netcoreapp3.1 -v d -c Release -r win10-x64"
      zipAfterPublish: True
      workingDirectory: "src/Ml.WebApp"

  - task: PublishBuildArtifacts@1
    displayName: "Publish Artifact: drop"
    inputs:
      PathtoPublish: "$(Build.ArtifactStagingDirectory)"